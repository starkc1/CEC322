


ARM Macro Assembler    Page 1 


    1 00000000                 AREA             asm_code, CODE, READONLY
    2 00000000         
    3 00000000                 EXPORT           aTask1
    4 00000000                 EXPORT           aTask2
    5 00000000                 EXPORT           aTask3
    6 00000000                 EXPORT           aTask4
    7 00000000         
    8 00000000                 ALIGN
    9 00000000         
   10 00000000         
   11 00000000         ; For loop: Find the index of the min number in an array
                        arr of size n
   12 00000000         ; uint32_t aTask1(int32_t *arr, int32_t n); 
   13 00000000         aTask1  PROC
   14 00000000 B530            PUSH             {r4, r5, lr}
   15 00000002 6804            LDR              r4, [r0]    ; minVal
   16 00000004 F04F 0300       MOV              r3, #0      ; minLoc
   17 00000008 F04F 0200       MOV              r2, #0      ;i
   18 0000000C         aTask1_loop
   19 0000000C 428A            CMP              r2, r1
   20 0000000E DA08            BGE              aTask1_end
   21 00000010 F850 5022       LDR              r5, [r0, r2, LSL #2]
   22 00000014 42A5            CMP              r5, r4
   23 00000016 BFBC 462C       MOVLT            r4, r5
   24 0000001A 4613            MOVLT            r3, r2
   25 0000001C F102 0201       ADD              r2, #1
   26 00000020 E7F4            B                aTask1_loop
   27 00000022         aTask1_end
   28 00000022 4618            MOV              r0, r3
   29 00000024 BD30            POP              {r4, r5, pc}
   30 00000026 4770            BX               lr
   31 00000028                 ENDP
   32 00000028         
   33 00000028         ; While loop: Determine the number of binary 1's using t
                       he parity-checking alg
   34 00000028         ; uint32_t aTask4(uint32_t num); 
   35 00000028         aTask2  PROC
   36 00000028 F04F 0100       MOV              r1, #0
   37 0000002C F04F 0200       MOV              r2, #0
   38 00000030         aTask2_loop
   39 00000030 B130            CBZ              r0, aTask2_end
   40 00000032 F1A0 0201       SUB              r2, r0, #1
   41 00000036 EA02 0000       AND              r0, r2, r0
   42 0000003A F101 0101       ADD              r1, #1
   43 0000003E E7F7            B                aTask2_loop
   44 00000040         aTask2_end
   45 00000040 4608            MOV              r0, r1
   46 00000042 4770            BX               lr
   47 00000044                 ENDP
   48 00000044         
   49 00000044         ; Do-while loop: Count the number of binary 1's using a 
                       simplified approach
   50 00000044         ; uint32_t aTask3(uint32_t x);
   51 00000044         aTask3  PROC
   52 00000044 EA4F 71D0       MOV              r1, r0, LSR #31
   53 00000048         aTask3_loop
   54 00000048 0080            MOVS             r0, r0, LSL #2
   55 0000004A EB41 71D0       ADC              r1, r0, LSR #31
   56 0000004E B100            CBZ              r0, aTask3_end



ARM Macro Assembler    Page 2 


   57 00000050 E7FA            B                aTask3_loop
   58 00000052         aTask3_end
   59 00000052 4608            MOV              r0, r1
   60 00000054 4770            BX               LR
   61 00000056                 ENDP
   62 00000056         
   63 00000056         ; Count the number of deimal digits of an uint32_t numbe
                       r
   64 00000056         ; uint32_t aTask4(uint32_t n, uint32_t b);
   65 00000056         aTask4  PROC
   66 00000056 F04F 0100       MOV              r1, #0
   67 0000005A F04F 0208       MOV              r2, #8
   68 0000005E         aTask4_loop
   69 0000005E B120            CBZ              r0, aTask4_end
   70 00000060 FBB0 F0F2       UDIV             r0, r0, r2
   71 00000064 F101 0101       ADD              r1, #1
   72 00000068 E7F9            B                aTask4_loop
   73 0000006A         aTask4_end
   74 0000006A 4608            MOV              r0, r1
   75 0000006C 4770            BX               lr
   76 0000006E                 ENDP
   77 0000006E         
   78 0000006E         
   79 0000006E                 END
Command Line: --debug --xref --diag_suppress=9931 --cpu=Cortex-M4.fp --apcs=int
erwork --depend=.\objects\asm_code.d -o.\objects\asm_code.o -I.\RTE\_Target---s
im -IC:\Keil_v5\ARM\PACK\ARM\CMSIS\5.4.0\CMSIS\Core\Include -IC:\Keil_v5\ARM\PA
CK\ARM\CMSIS\5.4.0\Device\ARM\ARMCM4\Include --predefine="__EVAL SETA 1" --pred
efine="__UVISION_VERSION SETA 526" --predefine="_RTE_ SETA 1" --predefine="ARMC
M4_FP SETA 1" --list=.\listings\asm_code.lst asm_code.s



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Relocatable symbols

aTask1 00000000

Symbol: aTask1
   Definitions
      At line 13 in file asm_code.s
   Uses
      At line 3 in file asm_code.s
Comment: aTask1 used once
aTask1_end 00000022

Symbol: aTask1_end
   Definitions
      At line 27 in file asm_code.s
   Uses
      At line 20 in file asm_code.s
Comment: aTask1_end used once
aTask1_loop 0000000C

Symbol: aTask1_loop
   Definitions
      At line 18 in file asm_code.s
   Uses
      At line 26 in file asm_code.s
Comment: aTask1_loop used once
aTask2 00000028

Symbol: aTask2
   Definitions
      At line 35 in file asm_code.s
   Uses
      At line 4 in file asm_code.s
Comment: aTask2 used once
aTask2_end 00000040

Symbol: aTask2_end
   Definitions
      At line 44 in file asm_code.s
   Uses
      At line 39 in file asm_code.s
Comment: aTask2_end used once
aTask2_loop 00000030

Symbol: aTask2_loop
   Definitions
      At line 38 in file asm_code.s
   Uses
      At line 43 in file asm_code.s
Comment: aTask2_loop used once
aTask3 00000044

Symbol: aTask3
   Definitions
      At line 51 in file asm_code.s
   Uses
      At line 5 in file asm_code.s
Comment: aTask3 used once
aTask3_end 00000052

Symbol: aTask3_end



ARM Macro Assembler    Page 2 Alphabetic symbol ordering
Relocatable symbols

   Definitions
      At line 58 in file asm_code.s
   Uses
      At line 56 in file asm_code.s
Comment: aTask3_end used once
aTask3_loop 00000048

Symbol: aTask3_loop
   Definitions
      At line 53 in file asm_code.s
   Uses
      At line 57 in file asm_code.s
Comment: aTask3_loop used once
aTask4 00000056

Symbol: aTask4
   Definitions
      At line 65 in file asm_code.s
   Uses
      At line 6 in file asm_code.s
Comment: aTask4 used once
aTask4_end 0000006A

Symbol: aTask4_end
   Definitions
      At line 73 in file asm_code.s
   Uses
      At line 69 in file asm_code.s
Comment: aTask4_end used once
aTask4_loop 0000005E

Symbol: aTask4_loop
   Definitions
      At line 68 in file asm_code.s
   Uses
      At line 72 in file asm_code.s
Comment: aTask4_loop used once
asm_code 00000000

Symbol: asm_code
   Definitions
      At line 1 in file asm_code.s
   Uses
      None
Comment: asm_code unused
13 symbols
348 symbols in table
