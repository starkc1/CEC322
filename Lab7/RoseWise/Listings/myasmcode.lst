


ARM Macro Assembler    Page 1 


    1 00000000                 AREA             my_fancy_asm_code, CODE, READON
LY 
                                                            ; Define the progra
                                                            m area
    2 00000000         
    3 00000000         ; Export functions defined in this file. These functions
                        need to be declared
    4 00000000         ; in the file calling them.
    5 00000000                 EXPORT           task1
    6 00000000                 EXPORT           task2
    7 00000000                 EXPORT           task3
    8 00000000                 EXPORT           task4
    9 00000000                 EXPORT           task5
   10 00000000                 EXPORT           task6
   11 00000000                 EXPORT           task7
   12 00000000                 EXPORT           task8
   13 00000000                 EXPORT           task9
   14 00000000                 EXPORT           task10
   15 00000000         
   16 00000000                 ALIGN                        ; Align the data in
                                                             the boundary of 4 
                                                            bytes.
   17 00000000         
   18 00000000         ;uint32_t task1(uint32_t a, uint32_t x);
   19 00000000         task1   PROC
   20 00000000         
   21 00000000 4281            CMP              r1, r0
   22 00000002 DA03            BGE              end_if1
   23 00000004 EA4F 0090       LSR              r0, #2
   24 00000008 F100 0001       ADD              r0, #1
   25 0000000C         end_if1
   26 0000000C 4770            BX               lr
   27 0000000E                 ENDP
   28 0000000E         ;uint32_t task2(uint32_t a, uint32_t x);
   29 0000000E         task2   PROC
   30 0000000E         
   31 0000000E 2914            CMP              r1, #20
   32 00000010 DD01            BLE              else_succ3
   33 00000012 2919            CMP              r1, #25
   34 00000014 DB03            BLT              end_if2
   35 00000016         else_succ3
   36 00000016 EA4F 0040       LSL              r0, #1
   37 0000001A F1A0 0001       SUB              r0, #1
   38 0000001E         end_if2
   39 0000001E 4770            BX               lr
   40 00000020                 ENDP
   41 00000020         ;uint32_t task3(uint32_t a, uint32_t x);
   42 00000020         task3   PROC
   43 00000020 EA4F 03C1       MOV              r3, r1, LSL #3
   44 00000024 4298            CMP              r0, r3
   45 00000026 D101            BNE              else_3
   46 00000028 390A            SUBS             r1, #10
   47 0000002A E001            B                end_if3
   48 0000002C         else_3
   49 0000002C 3904            SUBS             r1, #4
   50 0000002E E7FF            B                end_if3
   51 00000030         end_if3
   52 00000030 4608            MOV              r0, r1
   53 00000032 4770            BX               lr



ARM Macro Assembler    Page 2 


   54 00000034                 ENDP
   55 00000034         
   56 00000034         ;uint32_t task4(uint32_t a, uint32_t x);
   57 00000034         task4   PROC
   58 00000034         
   59 00000034 2914            CMP              r1, #20
   60 00000036 DA01            BGE              else_succ4
   61 00000038 2919            CMP              r1, #25
   62 0000003A DC04            BGT              else4
   63 0000003C         else_succ4
   64 0000003C F100 0001       ADD              r0, #1
   65 00000040 EA4F 00C0       LSL              r0, #3
   66 00000044 E003            B                end_if4
   67 00000046         else4
   68 00000046         
   69 00000046 F1A0 0001       SUB              r0, #1
   70 0000004A EA4F 1000       LSL              r0, #4
   71 0000004E         
   72 0000004E         end_if4
   73 0000004E 4770            BX               lr
   74 00000050                 ENDP
   75 00000050         ;uint32_t task5(uint32_t n);
   76 00000050         task5   PROC
   77 00000050 F04F 0100       MOV              r1, #0      ; variable (int) i
   78 00000054 F04F 0200       MOV              r2, #0      ; sum5 = 0
   79 00000058         task5_loop
   80 00000058 4281            CMP              r1, r0
   81 0000005A DA07            BGE              task5_end
   82 0000005C F101 0302       ADD              r3, r1, #2
   83 00000060 EA4F 03C3       LSL              r3, #3
   84 00000064 441A            ADD              r2, r3
   85 00000066 F101 0101       ADD              r1, #1
   86 0000006A E7F5            B                task5_loop  ; branch to task5_l
                                                            oop
   87 0000006C         task5_end
   88 0000006C 4610            MOV              r0, r2
   89 0000006E 4770            BX               lr          ; return
   90 00000070                 ENDP
   91 00000070         
   92 00000070         ;uint32_t task6(uint32_t *ptr, uint32_t n);
   93 00000070         task6   PROC
   94 00000070 B570            PUSH{r4          -r6, lr}
   95 00000072 F04F 0300       MOV              r3, #0      ; sum
   96 00000076 F04F 0400       MOV              r4, #0      ; i
   97 0000007A         for_loop6
   98 0000007A 42A1            CMP              r1, r4
   99 0000007C DD07            BLE              end_loop6
  100 0000007E         
  101 0000007E F850 6B04       LDR              r6, [r0], #4
  102 00000082 F006 060F       AND              r6, #0x0F
  103 00000086 4433            ADD              r3, r6
  104 00000088         
  105 00000088 F104 0401       ADD              r4, #1
  106 0000008C E7F5            B                for_loop6
  107 0000008E         end_loop6
  108 0000008E 4618            MOV              r0, r3
  109 00000090 BD70            POP              {r4-r6, pc}
  110 00000092                 ENDP
  111 00000092         



ARM Macro Assembler    Page 3 


  112 00000092         ;uint32_t task7(uint32_t n);
  113 00000092         task7   PROC
  114 00000092 F04F 0100       MOV              r1, #0
  115 00000096 F04F 0200       MOV              r2, #0
  116 0000009A         task7_loop
  117 0000009A 4281            CMP              r1, r0
  118 0000009C DA07            BGE              task7_end
  119 0000009E EA4F 0381       MOV              r3, r1, LSL #2
  120 000000A2 F043 030F       ORR              r3, #15
  121 000000A6 441A            ADD              r2, r3
  122 000000A8 F101 0101       ADD              r1, #1
  123 000000AC E7F5            B                task7_loop
  124 000000AE         task7_end
  125 000000AE 4610            MOV              r0, r2
  126 000000B0 4770            BX               lr
  127 000000B2                 ENDP
  128 000000B2         
  129 000000B2         ;uint32_t task8(uint32_t *ptr, uint32_t n);
  130 000000B2         task8   PROC
  131 000000B2 F04F 0200       MOV              r2, #0      ; sum
  132 000000B6         loop_8
  133 000000B6 2900            CMP              r1, #0
  134 000000B8 DD05            BLE              endloop_8
  135 000000BA         
  136 000000BA F1A1 0101       SUB              r1, #1
  137 000000BE F850 3021       LDR              r3, [r0, r1, LSL #2]
  138 000000C2 18D2            ADDS             r2, r3
  139 000000C4         
  140 000000C4 E7F7            B                loop_8
  141 000000C6         endloop_8
  142 000000C6 4610            MOV              r0, r2
  143 000000C8 4770            BX               lr
  144 000000CA                 ENDP
  145 000000CA         
  146 000000CA         ;uint32_t task9(uint32_t n);
  147 000000CA         task9   PROC
  148 000000CA F04F 0100       MOV              r1, #0
  149 000000CE F04F 0200       MOV              r2, #0
  150 000000D2         task9_loop
  151 000000D2 EA4F 0381       MOV              r3, r1, LSL #2
  152 000000D6 F043 030F       ORR              r3, #15
  153 000000DA 441A            ADD              r2, r3
  154 000000DC F101 0101       ADD              r1, #1
  155 000000E0 4281            CMP              r1, r0
  156 000000E2 DBF6            BLT              task9_loop
  157 000000E4         task9_end
  158 000000E4 4610            MOV              r0, r2
  159 000000E6 4770            BX               lr
  160 000000E8                 ENDP
  161 000000E8         
  162 000000E8         ;uint32_t task10(uint32_t *ptr, uint32_t n);
  163 000000E8         task10  PROC
  164 000000E8 B530            PUSH{r4-r5,      lr}
  165 000000EA F04F 0300       MOV              r3, #0
  166 000000EE         task10_loop
  167 000000EE 2900            CMP              r1, #0
  168 000000F0 DD07            BLE              task10_end
  169 000000F2         
  170 000000F2 F850 4B04       LDR              r4, [r0], #4



ARM Macro Assembler    Page 4 


  171 000000F6 EA4F 0444       LSL              r4, #1
  172 000000FA 4423            ADD              r3, r4
  173 000000FC F1A1 0101       SUB              r1, #1
  174 00000100         
  175 00000100         
  176 00000100 E7F5            B                task10_loop
  177 00000102         task10_end
  178 00000102 4618            MOV              r0, r3
  179 00000104 BD30            POP{r4-r5,       pc}
  180 00000106                 ENDP
  181 00000106         
  182 00000106         
  183 00000106                 END
Command Line: --debug --xref --diag_suppress=9931 --cpu=Cortex-M4.fp --apcs=int
erwork --depend=.\objects\myasmcode.d -o.\objects\myasmcode.o -I.\RTE\_Target_1
 -IC:\Keil_v5\ARM\PACK\ARM\CMSIS\5.4.0\CMSIS\Core\Include -IC:\Keil_v5\ARM\PACK
\ARM\CMSIS\5.4.0\Device\ARM\ARMCM4\Include --predefine="__EVAL SETA 1" --predef
ine="__UVISION_VERSION SETA 526" --predefine="_RTE_ SETA 1" --predefine="ARMCM4
_FP SETA 1" --list=.\listings\myasmcode.lst myAsmCode.s



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Relocatable symbols

else4 00000046

Symbol: else4
   Definitions
      At line 67 in file myAsmCode.s
   Uses
      At line 62 in file myAsmCode.s
Comment: else4 used once
else_3 0000002C

Symbol: else_3
   Definitions
      At line 48 in file myAsmCode.s
   Uses
      At line 45 in file myAsmCode.s
Comment: else_3 used once
else_succ3 00000016

Symbol: else_succ3
   Definitions
      At line 35 in file myAsmCode.s
   Uses
      At line 32 in file myAsmCode.s
Comment: else_succ3 used once
else_succ4 0000003C

Symbol: else_succ4
   Definitions
      At line 63 in file myAsmCode.s
   Uses
      At line 60 in file myAsmCode.s
Comment: else_succ4 used once
end_if1 0000000C

Symbol: end_if1
   Definitions
      At line 25 in file myAsmCode.s
   Uses
      At line 22 in file myAsmCode.s
Comment: end_if1 used once
end_if2 0000001E

Symbol: end_if2
   Definitions
      At line 38 in file myAsmCode.s
   Uses
      At line 34 in file myAsmCode.s
Comment: end_if2 used once
end_if3 00000030

Symbol: end_if3
   Definitions
      At line 51 in file myAsmCode.s
   Uses
      At line 47 in file myAsmCode.s
      At line 50 in file myAsmCode.s

end_if4 0000004E




ARM Macro Assembler    Page 2 Alphabetic symbol ordering
Relocatable symbols

Symbol: end_if4
   Definitions
      At line 72 in file myAsmCode.s
   Uses
      At line 66 in file myAsmCode.s
Comment: end_if4 used once
end_loop6 0000008E

Symbol: end_loop6
   Definitions
      At line 107 in file myAsmCode.s
   Uses
      At line 99 in file myAsmCode.s
Comment: end_loop6 used once
endloop_8 000000C6

Symbol: endloop_8
   Definitions
      At line 141 in file myAsmCode.s
   Uses
      At line 134 in file myAsmCode.s
Comment: endloop_8 used once
for_loop6 0000007A

Symbol: for_loop6
   Definitions
      At line 97 in file myAsmCode.s
   Uses
      At line 106 in file myAsmCode.s
Comment: for_loop6 used once
loop_8 000000B6

Symbol: loop_8
   Definitions
      At line 132 in file myAsmCode.s
   Uses
      At line 140 in file myAsmCode.s
Comment: loop_8 used once
my_fancy_asm_code 00000000

Symbol: my_fancy_asm_code
   Definitions
      At line 1 in file myAsmCode.s
   Uses
      None
Comment: my_fancy_asm_code unused
task1 00000000

Symbol: task1
   Definitions
      At line 19 in file myAsmCode.s
   Uses
      At line 5 in file myAsmCode.s
Comment: task1 used once
task10 000000E8

Symbol: task10
   Definitions
      At line 163 in file myAsmCode.s



ARM Macro Assembler    Page 3 Alphabetic symbol ordering
Relocatable symbols

   Uses
      At line 14 in file myAsmCode.s
Comment: task10 used once
task10_end 00000102

Symbol: task10_end
   Definitions
      At line 177 in file myAsmCode.s
   Uses
      At line 168 in file myAsmCode.s
Comment: task10_end used once
task10_loop 000000EE

Symbol: task10_loop
   Definitions
      At line 166 in file myAsmCode.s
   Uses
      At line 176 in file myAsmCode.s
Comment: task10_loop used once
task2 0000000E

Symbol: task2
   Definitions
      At line 29 in file myAsmCode.s
   Uses
      At line 6 in file myAsmCode.s
Comment: task2 used once
task3 00000020

Symbol: task3
   Definitions
      At line 42 in file myAsmCode.s
   Uses
      At line 7 in file myAsmCode.s
Comment: task3 used once
task4 00000034

Symbol: task4
   Definitions
      At line 57 in file myAsmCode.s
   Uses
      At line 8 in file myAsmCode.s
Comment: task4 used once
task5 00000050

Symbol: task5
   Definitions
      At line 76 in file myAsmCode.s
   Uses
      At line 9 in file myAsmCode.s
Comment: task5 used once
task5_end 0000006C

Symbol: task5_end
   Definitions
      At line 87 in file myAsmCode.s
   Uses
      At line 81 in file myAsmCode.s
Comment: task5_end used once



ARM Macro Assembler    Page 4 Alphabetic symbol ordering
Relocatable symbols

task5_loop 00000058

Symbol: task5_loop
   Definitions
      At line 79 in file myAsmCode.s
   Uses
      At line 86 in file myAsmCode.s
Comment: task5_loop used once
task6 00000070

Symbol: task6
   Definitions
      At line 93 in file myAsmCode.s
   Uses
      At line 10 in file myAsmCode.s
Comment: task6 used once
task7 00000092

Symbol: task7
   Definitions
      At line 113 in file myAsmCode.s
   Uses
      At line 11 in file myAsmCode.s
Comment: task7 used once
task7_end 000000AE

Symbol: task7_end
   Definitions
      At line 124 in file myAsmCode.s
   Uses
      At line 118 in file myAsmCode.s
Comment: task7_end used once
task7_loop 0000009A

Symbol: task7_loop
   Definitions
      At line 116 in file myAsmCode.s
   Uses
      At line 123 in file myAsmCode.s
Comment: task7_loop used once
task8 000000B2

Symbol: task8
   Definitions
      At line 130 in file myAsmCode.s
   Uses
      At line 12 in file myAsmCode.s
Comment: task8 used once
task9 000000CA

Symbol: task9
   Definitions
      At line 147 in file myAsmCode.s
   Uses
      At line 13 in file myAsmCode.s
Comment: task9 used once
task9_end 000000E4

Symbol: task9_end



ARM Macro Assembler    Page 5 Alphabetic symbol ordering
Relocatable symbols

   Definitions
      At line 157 in file myAsmCode.s
   Uses
      None
Comment: task9_end unused
task9_loop 000000D2

Symbol: task9_loop
   Definitions
      At line 150 in file myAsmCode.s
   Uses
      At line 156 in file myAsmCode.s
Comment: task9_loop used once
31 symbols
366 symbols in table
